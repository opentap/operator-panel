(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{273:function(e,t,a){e.exports=a.p+"assets/img/operator-ui.d419caa6.png"},274:function(e,t,a){e.exports=a.p+"assets/img/view-menu.a1b008d2.png"},275:function(e,t,a){e.exports=a.p+"assets/img/operator-test-plan.a8d46e6a.png"},276:function(e,t,a){e.exports=a.p+"assets/img/presets-view.e8260062.png"},284:function(e,t,a){"use strict";a.r(t);var s=a(14),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"operator-panel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#operator-panel"}},[e._v("#")]),e._v(" Operator Panel")]),e._v(" "),t("p",[e._v("The Operator Panel is a user interface plugin for Test Automation, designed to streamline manufacturing tests.")]),e._v(" "),t("p",[t("img",{attrs:{src:a(273),alt:"operator ui"}})]),e._v(" "),t("h2",{attrs:{id:"table-of-contents"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-of-contents"}},[e._v("#")]),e._v(" Table of Contents")]),e._v(" "),t("ol",[t("li",[e._v("Overview")]),e._v(" "),t("li",[e._v("Licensing")]),e._v(" "),t("li",[e._v("Installation")]),e._v(" "),t("li",[e._v("Usage")]),e._v(" "),t("li",[e._v("Customization")]),e._v(" "),t("li",[e._v("Designing Test Steps for the Operator Panel")]),e._v(" "),t("li",[e._v("Source code and license")]),e._v(" "),t("li",[e._v("For more information")])]),e._v(" "),t("h2",{attrs:{id:"_1-overview"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-overview"}},[e._v("#")]),e._v(" 1. Overview")]),e._v(" "),t("p",[e._v("Manufacturing environments often require a streamlined and user-friendly experience to increase efficiency and reduce the chance of errors. The Operator Panel provides an intuitive solution, allowing for simultaneous execution of any number of parallel tests. All panels run the same test plan, but each has a separate set of external parameters that are set individually. In 'focus mode', there is no way to modify or affect the test plan run, except for a few intended methods.")]),e._v(" "),t("p",[e._v("The Operator Panel plugin can be used out-of-the-box, but the source code is also provided as a basis or example for creating new panel implementations tailored to your specific needs.")]),e._v(" "),t("h2",{attrs:{id:"_2-licensing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-licensing"}},[e._v("#")]),e._v(" 2. Licensing")]),e._v(" "),t("p",[e._v("To execute and view test plans using custom panels in Test Automation (Editor.exe), you will need a TAP_Engine license.")]),e._v(" "),t("p",[e._v("If you also need to edit test plans using standard Test Automation features, a TAP_Editor license is required.")]),e._v(" "),t("p",[e._v("Note that if you only need to execute test plans, the TAP_Engine license is sufficient.")]),e._v(" "),t("h2",{attrs:{id:"_3-installation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-installation"}},[e._v("#")]),e._v(" 3. Installation")]),e._v(" "),t("ul",[t("li",[e._v("Install the Operator Panel plugin using the Test Automation Package Manager or using the command line interface:\n"),t("ul",[t("li",[t("code",[e._v('tap package install "Operator Panel"')])])])]),e._v(" "),t("li",[e._v("Start Test Automation.")])]),e._v(" "),t("h2",{attrs:{id:"_4-usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-usage"}},[e._v("#")]),e._v(" 4. Usage")]),e._v(" "),t("ul",[t("li",[e._v("The basic panel can be opened from the View menu.")])]),e._v(" "),t("p",[t("img",{attrs:{src:a(274),alt:"view menu"}})]),e._v(" "),t("ul",[t("li",[e._v("The operator panel can be docked next to the test plan panel like this:")])]),e._v(" "),t("p",[t("img",{attrs:{src:a(275),alt:"view menu"}})]),e._v(" "),t("p",[e._v("To make the panel aware of you DUT, parameterize the DUT property unto the test plan.")]),e._v(" "),t("p",[e._v("Results seen in the operator panel are properties from the test plan steps which are marked with the "),t("code",[e._v("[Result]")]),e._v(" attribute. How to manage this can be seen in the example / demonstration plugin.")]),e._v(" "),t("h2",{attrs:{id:"_4-1-focus-mode"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-focus-mode"}},[e._v("#")]),e._v(" 4.1 Focus Mode")]),e._v(" "),t("p",[e._v("Focus mode minimizes the number of interactions with Test Automation, reducing the likelihood of operators performing unintended actions.")]),e._v(" "),t("p",[e._v("For optimal use of the Operator Panel in a manufacturing setting, follow these steps:")]),e._v(" "),t("ol",[t("li",[e._v("Remove all unnecessary panels from the view.")]),e._v(" "),t("li",[e._v("Dock the Operator Panel in the center of the user interface.")]),e._v(" "),t("li",[e._v("Maximize the window and enter focus mode by pressing the ALT+Shift+Enter keyboard shortcut.")]),e._v(" "),t("li",[e._v("Save this preset by pressing CTRL+ALT+Shift+S.")])]),e._v(" "),t("p",[e._v("We recommend creating both a 'developer' and an 'operator' preset, which can be easily switched between using the ALT+Shift+[1234] keyboard combination. See the preset menu for details.")]),e._v(" "),t("p",[t("img",{attrs:{src:a(276),alt:"Presets menu"}})]),e._v(" "),t("h2",{attrs:{id:"_5-customization"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-customization"}},[e._v("#")]),e._v(" 5. Customization")]),e._v(" "),t("p",[e._v("Different manufacturing environments may require different operator panel implementations. For example, you may need to customize the panel's layout, add or remove certain features, or integrate it with other tools.")]),e._v(" "),t("p",[e._v("The current implementation of the Operator Panel may make assumptions that are not optimal for every environment. Hence, we provide the source code as a basis or example for creating your own implementation. You can tailor the code to meet your specific needs and adapt it to your unique situation.")]),e._v(" "),t("p",[e._v("We encourage you to explore the source code and experiment with different customizations. Don't hesitate to share your modifications with the OpenTAP community or seek help from our support forums.")]),e._v(" "),t("p",[e._v("For more information on customizing the Operator Panel, check out our documentation and tutorials.")]),e._v(" "),t("h2",{attrs:{id:"_6-designing-test-steps-for-the-operator-panel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-designing-test-steps-for-the-operator-panel"}},[e._v("#")]),e._v(" 6. Designing Test Steps for the Operator Panel")]),e._v(" "),t("p",[e._v("A few considerations can be made when designing test step for usage with the Operator Panel plugin.\nNote that all test steps can be run inside the panels, but if they are designed in a certain way, the usability can be improved even further.")]),e._v(" "),t("p",[e._v("Example code can be found here: https://github.com/opentap/operator-panel/tree/main/OpenTap.OperatorPanel.Test")]),e._v(" "),t("h3",{attrs:{id:"_6-1-results"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-results"}},[e._v("#")]),e._v(" 6.1 Results")]),e._v(" "),t("p",[e._v("Results from test steps can be displayed in each panel by creating properties that utilize the ResultAttribute. This attribute indicates that the property should be saved as a result.")]),e._v(" "),t("p",[e._v("For example:")]),e._v(" "),t("div",{staticClass:"language-cs extra-class"},[t("pre",{pre:!0,attrs:{class:"language-cs"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token attribute"}},[t("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Result")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("double")])]),e._v(" Voltage"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("get")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("Run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Voltage "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" Instrument"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("MeasureVoltage")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Voltage "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" VoltageLimit"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("UpgradeVerdict")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Verdict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Fail"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("else")]),e._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("UpgradeVerdict")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("Verdict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Pass"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("p",[e._v("The verdict of the test step determines whether the corresponding result is marked as pass or fail.")]),e._v(" "),t("p",[e._v("By declaring results in this manner, the results will be automatically sent to result listeners.")]),e._v(" "),t("p",[e._v('In this case, the name of the result corresponds to the name of the test step (e.g., "Voltage Measurement"), and the name of the column represents the property name (e.g., "Voltage"). The result value is the value assigned to the property when the test step completes.')]),e._v(" "),t("h3",{attrs:{id:"_6-2-duts"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-duts"}},[e._v("#")]),e._v(" 6.2 DUTs")]),e._v(" "),t("p",[e._v("Each panel can be associated with a specific Device Under Test (DUT). In certain cases, you may want to display a custom prompt when the test plan begins to allow the user to enter information such as the serial number for the DUT.")]),e._v(" "),t("p",[e._v("To accomplish this, the test plan needs to recognize that the DUT is a variable across multiple panels. This can be achieved by parameterizing the DUT within the test plan's scope.")]),e._v(" "),t("h2",{attrs:{id:"_7-source-code-and-license"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-source-code-and-license"}},[e._v("#")]),e._v(" 7. Source Code and License")]),e._v(" "),t("p",[e._v("The source code for the Operator Panel is provided under the MIT license.")]),e._v(" "),t("h2",{attrs:{id:"_8-for-more-information"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-for-more-information"}},[e._v("#")]),e._v(" 8. For more information")]),e._v(" "),t("p",[e._v("Here are some resources to help you learn more about the Operator Panel and get support:")]),e._v(" "),t("ul",[t("li",[t("p",[e._v("License: To obtain a TAP_Engine license, please contact your Keysight representative. For more information, you can visit https://www.keysight.com/zz/en/product/KS8000B/pathwave-test-automation-deployment-system.html/")])]),e._v(" "),t("li",[t("p",[e._v("Source code: The source code for the Operator Panel can be found on GitHub at https://github.com/opentap/operator-panel. Explore the code and experiment with different customizations to create your own implementation tailored to your specific needs.")])]),e._v(" "),t("li",[t("p",[e._v("OpenTAP website: Visit https://opentap.io to learn more about OpenTAP and its features.")])]),e._v(" "),t("li",[t("p",[e._v("Support forum: Join the OpenTAP community at https://forum.opentap.io to ask questions, share your experiences, and get help from other users and experts.")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);